module Abschapel where

-- Haskell module generated by the BNF converter


newtype Id = Id String deriving (Eq,Ord,Show)
data Prog =
   Program [Cmd]
  deriving (Eq,Ord,Show)

data Decl =
   VarDecl [Id] Type
 | VarDeclAss [Id] Type ExpR
 | ArrDeclSing [Id] Type [ExpR]
 | ArrDeclMult [Id] Type [ExpArrayElem]
 | ConstDecl Id Type ExpR
 | LabelDecl Id
 | ProcDecl Id [Param] Cmd
 | FuncDecl Id [Param] Type Cmd
  deriving (Eq,Ord,Show)

data Param =
   Param Id Type
 | PassParam Pass Id Type
  deriving (Eq,Ord,Show)

data Pass =
   Pass_val
 | Pass_ref
 | Pass_const
  deriving (Eq,Ord,Show)

data ExpR =
   Range ExpRange
 | ExpAdd ExpR ExpR
 | ExpSub ExpR ExpR
 | ExpMul ExpR ExpR
 | ExpDiv ExpR ExpR
 | ExpPot ExpR ExpR
 | ExpMod ExpR ExpR
 | ExpCast ExpR Type
 | ParExp ExpR
 | ExpNeg ExpR
 | ExpLeft ExpL
 | ExBasic Basic
 | ExpEqu ExpR ExpR
 | ExpLes ExpR ExpR
 | ExpLeq ExpR ExpR
 | ExpGre ExpR ExpR
 | ExpGrq ExpR ExpR
 | ExpNEq ExpR ExpR
 | ExpAnd ExpR ExpR
 | ExpXor ExpR ExpR
 | ExpOr ExpR ExpR
 | ExpNot ExpR
 | FunExp Id [ExpR]
  deriving (Eq,Ord,Show)

data ExpRange =
   ExpRange ExpR ExpR
  deriving (Eq,Ord,Show)

data ExpArrayElem =
   ExpArrayElem [ExpR]
  deriving (Eq,Ord,Show)

data ExpL =
   NameExp Id
 | ArrExp ExpL [ExpR]
  deriving (Eq,Ord,Show)

data Basic =
   Int Integer
 | Float Double
 | Char Char
 | String String
 | Bool Boolean
  deriving (Eq,Ord,Show)

data Boolean =
   BoolTrue
 | BoolFalse
  deriving (Eq,Ord,Show)

data Type =
   TypeInt
 | TypeFloat
 | TypeChar
 | TypeString
 | TypeBool
 | TypePointer Type
 | TypeArray [ExpRange] Type
 | TypeRange
 | TypeMix
 | TypeVoid
 | TypeError
  deriving (Eq,Ord,Show)

data Cmd =
   CmdSing CommSing
 | CmdMult [Cmd]
  deriving (Eq,Ord,Show)

data CommSing =
   CmdExpR ExpR
 | CmdWLabel Id
 | CmdIf ExpR Cmd
 | CmdIfElse ExpR Cmd Cmd
 | CmdWhile ExpR BlockLoop
 | CmdDoWhile Cmd ExpR
 | CmdFor Id ExpRange ExpFor BlockLoop
 | CmdForSimple Id ExpRange BlockLoop
 | CmdSelect ExpR [When]
 | CmdSelectOther ExpR [When] Cmd
 | CmdAsgn ExpL ExpR
 | CmdDecl Decl
 | CmdGoTo Id
 | CmdReturnFun ExpR
 | CmdReturnProc
 | CmdBreak
 | CmdContinue
 | CmdTryCatch Cmd Cmd
  deriving (Eq,Ord,Show)

data ExpFor =
   ExpFor_1 ExpR
 | ExpFor_2 ExpR
 | ExpFor_3 ExpR ExpR
  deriving (Eq,Ord,Show)

data BlockLoop =
   BlockLoopCmd Cmd
 | BlockLoop_2 CommSing
  deriving (Eq,Ord,Show)

data When =
   CmdWhen ExpR BlockLoop
  deriving (Eq,Ord,Show)

