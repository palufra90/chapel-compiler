module Skelchapel where

-- Haskell module generated by the BNF converter

import Abschapel
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transId :: Id -> Result
transId x = case x of
  Id str  -> failure x


transProg :: Prog -> Result
transProg x = case x of
  Program cmds  -> failure x


transDecl :: Decl -> Result
transDecl x = case x of
  VarDecl ids type'  -> failure x
  VarDeclAss ids type' expr  -> failure x
  ArrDeclSing ids type' exprs  -> failure x
  ArrDeclMult ids type' exparrayelems  -> failure x
  ConstDecl id type' expr  -> failure x
  LabelDecl id  -> failure x
  ProcDecl id params cmd  -> failure x
  FuncDecl id params type' cmd  -> failure x


transParam :: Param -> Result
transParam x = case x of
  Param id type'  -> failure x
  PassParam pass id type'  -> failure x


transPass :: Pass -> Result
transPass x = case x of
  Pass_val  -> failure x
  Pass_ref  -> failure x
  Pass_const  -> failure x


transExpR :: ExpR -> Result
transExpR x = case x of
  Range exprange  -> failure x
  ExpAdd expr1 expr2  -> failure x
  ExpSub expr1 expr2  -> failure x
  ExpMul expr1 expr2  -> failure x
  ExpDiv expr1 expr2  -> failure x
  ExpPot expr1 expr2  -> failure x
  ExpMod expr1 expr2  -> failure x
  ExpCast expr type'  -> failure x
  ParExp expr  -> failure x
  ExpNeg expr  -> failure x
  ExpLeft expl  -> failure x
  ExBasic basic  -> failure x
  ExpEqu expr1 expr2  -> failure x
  ExpLes expr1 expr2  -> failure x
  ExpLeq expr1 expr2  -> failure x
  ExpGre expr1 expr2  -> failure x
  ExpGrq expr1 expr2  -> failure x
  ExpNEq expr1 expr2  -> failure x
  ExpAnd expr1 expr2  -> failure x
  ExpXor expr1 expr2  -> failure x
  ExpOr expr1 expr2  -> failure x
  ExpNot expr  -> failure x
  FunExp id exprs  -> failure x


transExpRange :: ExpRange -> Result
transExpRange x = case x of
  ExpRange expr1 expr2  -> failure x


transExpArrayElem :: ExpArrayElem -> Result
transExpArrayElem x = case x of
  ExpArrayElem exprs  -> failure x


transExpL :: ExpL -> Result
transExpL x = case x of
  NameExp id  -> failure x
  ArrExp expl exprs  -> failure x


transBasic :: Basic -> Result
transBasic x = case x of
  Int n  -> failure x
  Float d  -> failure x
  Char c  -> failure x
  String str  -> failure x
  Bool boolean  -> failure x


transBoolean :: Boolean -> Result
transBoolean x = case x of
  BoolTrue  -> failure x
  BoolFalse  -> failure x


transType :: Type -> Result
transType x = case x of
  TypeInt  -> failure x
  TypeFloat  -> failure x
  TypeChar  -> failure x
  TypeString  -> failure x
  TypeBool  -> failure x
  TypePointer type'  -> failure x
  TypeArray expranges type'  -> failure x


transCmd :: Cmd -> Result
transCmd x = case x of
  CmdSing commsing  -> failure x
  CmdMult cmds  -> failure x


transCommSing :: CommSing -> Result
transCommSing x = case x of
  CmdExpR expr  -> failure x
  CmdWLabel id  -> failure x
  CmdIf expr cmd  -> failure x
  CmdIfElse expr cmd1 cmd2  -> failure x
  CmdWhile expr blockloop  -> failure x
  CmdDoWhile cmd expr  -> failure x
  CmdFor id exprange expfor blockloop  -> failure x
  CmdForSimple id exprange blockloop  -> failure x
  CmdSelect expr whens  -> failure x
  CmdSelectOther expr whens cmd  -> failure x
  CmdAsgn expl expr  -> failure x
  CmdDecl decl  -> failure x
  CmdGoTo id  -> failure x
  CmdReturnFun expr  -> failure x
  CmdReturnProc  -> failure x
  CmdBreak  -> failure x
  CmdContinue  -> failure x
  CmdTryCatch cmd1 cmd2  -> failure x


transExpFor :: ExpFor -> Result
transExpFor x = case x of
  ExpFor_1 expr  -> failure x
  ExpFor_2 expr  -> failure x
  ExpFor_3 expr1 expr2  -> failure x


transBlockLoop :: BlockLoop -> Result
transBlockLoop x = case x of
  BlockLoopCmd cmd  -> failure x
  BlockLoop_2 commsing  -> failure x


transWhen :: When -> Result
transWhen x = case x of
  CmdWhen expr blockloop  -> failure x



